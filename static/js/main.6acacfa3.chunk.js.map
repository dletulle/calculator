{"version":3,"sources":["Components/Buttons.js","Components/Display.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","props","id","class","onClick","click","Display","result","display","math","num1","num2","App","state","number","numbers","operations","handleClick","bind","calculate","e","numberPressed","target","textContent","addNumbers","this","slice","addOperators","addDisplay","setState","test","length","hasOwnProperty","concat","pop","console","log","push","parseFloat","firstNum","secondNumIndex","i","toString","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6acacfa3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Buttons = (props) => {\n    return (\n      <div id=\"buttons\">\n        <button class=\"cero\" onClick={props.click} id=\"clear\">C</button>\n        <button class=\"numbers\" onClick={props.click} id=\"divide\">/</button>\n        <button class=\"numbers\" onClick={props.click} id=\"multiply\">x</button>\n        <button class=\"numbers\" onClick={props.click} id=\"seven\">7</button>\n        <button class=\"numbers\" onClick={props.click} id=\"eight\">8</button>\n        <button class=\"numbers\" onClick={props.click} id=\"nine\">9</button>\n        <button class=\"numbers\" onClick={props.click} id=\"subtract\">-</button>\n        <button class=\"numbers\" onClick={props.click} id=\"four\">4</button>\n        <button class=\"numbers\" onClick={props.click} id=\"five\">5</button>\n        <button class=\"numbers\" onClick={props.click} id=\"six\">6</button>\n        <button class=\"numbers\" onClick={props.click} id=\"add\">+</button>\n        <button class=\"numbers\" onClick={props.click} id=\"one\">1</button>\n        <button class=\"numbers\" onClick={props.click} id=\"two\">2</button>\n        <button class=\"numbers\" onClick={props.click} id=\"three\">3</button>\n        <button class=\"cero\" onClick={props.click} id=\"zero\">0</button>\n        <button class=\"numbers\" onClick={props.click} id=\"decimal\">.</button>\n        <button onClick={props.click} id=\"equals\">=</button>\n      </div>\n    )\n  }\n\n  export default Buttons;","import React from 'react';\n\nconst Display = (props) => {\n    return (\n      <div id=\"container\">\n        <p id=\"result\">{props.result}</p>\n        <p id=\"display\">{props.display}</p>\n        {/*for later*/}\n      </div>\n    )\n    }\n    export default Display;","import './App.css';\nimport React from 'react';\nimport Buttons from './Components/Buttons';\nimport Display from './Components/Display';\n\nconst math = {\n  \"+\": (num1, num2) => num1 + num2,\n  \"-\": (num1, num2) => num1 - num2,\n  \"/\": (num1, num2) => num1 / num2,\n  \"x\": (num1, num2) => num1 * num2\n}\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      number: \"0\",\n      numbers: [],\n      operations: [],\n      display: \"0\",\n      result: \"\"\n    }\n    \n    this.handleClick = this.handleClick.bind(this);\n    this.calculate = this.calculate.bind(this);\n  }\n  \n  handleClick (e) {\n    const numberPressed = e.target.textContent\n    const addNumbers = this.state.numbers.slice(0);\n    const addOperators = this.state.operations.slice(0);\n    const addDisplay = this.state.display.slice(0);\n    \n    if (numberPressed == \"C\") {\n      // Clear all states\n      this.setState({\n        number: \"0\",\n        numbers: [],\n        operations: [],\n        display: \"0\",\n        result: \"\"})\n    } else if (numberPressed == \"=\" && /\\d/.test(addDisplay[addDisplay.length - 1])) {\n      this.calculate();\n    } else if (math.hasOwnProperty(numberPressed) \n               && !/[+\\/x-]-$/.test(addDisplay.concat(numberPressed))) {\n      // If operator is entered twice, replace the last operator with the current pressed.\n      if (/[+\\/x]-[+\\/x]/.test(addDisplay.concat(numberPressed))) {\n        addOperators.pop();\n        this.setState({\n          display: addDisplay.slice(0, -2) + numberPressed,\n          number: \"\"})\n      } else if (/[+\\/x]{2}/.test(addDisplay.concat(numberPressed))) {\n        addOperators.pop();\n        this.setState({display: addDisplay.slice(0, -1) + numberPressed})\n      } else {\n        console.log(this.state.number)\n        addNumbers.push(parseFloat(this.state.number));\n        this.setState({\n          numbers: addNumbers,\n          number: \"\",\n          display: addDisplay.concat('', numberPressed)});\n      }\n      addOperators.push(numberPressed);\n      this.setState({operations: addOperators});\n    } else if (/[\\d-.]/.test(numberPressed)\n              && !/[-.]{2}|\\.\\d+\\./.test(this.state.display.concat(numberPressed))) {\n      // Update number and display states and calulate the results\n      if (addDisplay === \"0\") {\n        this.setState({\n          number: numberPressed, \n          display: numberPressed});\n      } else {\n        this.setState({\n          number: this.state.number.concat('', numberPressed), \n          display: addDisplay.concat('', numberPressed)});\n      }\n    }\n  }\n  \n  calculate () {\n    // Run the calulations and set the equals state\n    if (this.state.numbers.length > 0) {\n      let firstNum = this.state.numbers[0];\n      let secondNumIndex = 1;\n      for (let i of this.state.operations) {\n        if (secondNumIndex <= this.state.numbers.length - 1) {\n          firstNum = math[i](firstNum, this.state.numbers[secondNumIndex]);\n        } else {\n          firstNum = math[i](firstNum, parseFloat(this.state.number));\n        }\n        secondNumIndex++;\n      }\n      this.setState({\n        result: this.state.display + \" = \" + firstNum.toString(),\n        display: firstNum.toString(),\n        number: firstNum.toString(),\n        numbers: [],\n        operations: []})\n    }\n  }\n  \n  render () {\n    return (\n    <div id=\"calculator\">\n      <Display result={this.state.result} display={this.state.display}/>\n      <Buttons click={this.handleClick}/>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}